/* @theme: admin.oro; */

$enable-safe-area: true;

@mixin clearfix {
    *zoom: 1;

    &:before,
    &:after {
        display: table;
        content: "";
        line-height: 0;
    }

    &:after {
        clear: both;
    }
}

@mixin hide-text {
    font: 0/0 a;
    color: transparent;
    text-shadow: none;
    background-color: transparent;
    border: 0;
}

@mixin cursor-grab() {
    cursor: url(../../../oroui/img/cursor/grab.cur), move;
    cursor: -webkit-grab;
    cursor: -moz-grab;
}

@mixin cursor-grabbing() {
    cursor: url(../../../oroui/img/cursor/grabbing.cur), move;
    cursor: -webkit-grabbing;
    cursor: -moz-grabbing;
}

@mixin accordion-toggle() {
    font-weight: bold;
    padding-left: 15px;
    background: $accordionHeadingBackgroundColor;
    border-bottom: 1px solid darken($accordionHeadingBackgroundColor, 5%);
    border-top: 1px solid lighten($accordionHeadingBackgroundColor, 5%);
}

@mixin accordion-toggle-before() {
    content: "\f0d7";
    font-family: FontAwesome;
    margin: 0 7px 0 -7px;
    width: 10px;
    display: inline-block;
}

@mixin accordion-toggle-collapsed-before() {
    content: "\f0da";
    margin: 0 5px 0 -5px;
}

@mixin accordion-group() {
    border-radius: 0;
    margin-bottom: 0;
    border: none;
}

@mixin horizontal-icon-menu() {
    .dropdown-menu {
        padding: 0;
        right: 100%;
        left: auto;
        top: -10px;

        > li {
            display: table-cell;
        }

        .nav.launchers-list {
            padding: 0;

            > li:first-child > a {
                margin-left: 2px;
            }
        }
    }
}

@mixin open() {
    // IE7's z-index only goes to the nearest positioned ancestor, which would
    // make the menu appear below buttons that appeared later on the page
    *z-index: $zindexDropdown;

    & > .dropdown-menu {
        display: block;
    }
}

@mixin load-more-items($borderColor: #e5e5e5, $backgroundColor: #fff, $color: #888) {
    background-color: $backgroundColor;
    position: relative;
    text-align: center;
    cursor: pointer;

    .load-more-label {
        position: relative;
        z-index: 1;
        display: inline;
        color: $color;
        background-color: $backgroundColor;
        padding: 0 5px;
    }

    &:before,
    &:after {
        content: '';
        position: absolute;
        display: block;
        border-bottom: 1px solid $borderColor;
        width: 100%;
    }

    &:before {
        top: calc(25% + 1px);
    }

    &:after {
        bottom: calc(25% + 1px);
    }
}

@mixin process($loadingImagePath: '../../img/loader-16.gif') {
    position: relative;

    &:after {
        content: '';
        background: transparent url($loadingImagePath) no-repeat center left;
        position: absolute;
        width: 12px;
        height: 12px;
        background-size: 12px 12px;
        right: -20px;
        top: 50%;
        margin-top: -6px;
    }
}

@mixin inline-actions-element-outline($color, $width: 2px) {
    box-shadow: 0 0 0 $width $color;
}

@mixin floating-validation-message() {
    display: block;
    position: relative;
    z-index: 1;
    width: auto;
    height: 0;
    margin: 0;

    &:before {
        content: normal;
    }

    &:after {
        content: '';
        display: block;
        position: absolute;
        top: 100%;
        margin-top: -38px;
        left: 10px;
        border-style: solid;
        border-color: lighten($errorText, 20%) transparent;
        border-width: 8px 4px 0;
    }

    > span {
        position: fixed;
        width: $widthInput;
        margin-top: -37px;

        > span {
            position: absolute;
            bottom: 0;
            padding: 5px 5px 5px 20px;
            border-radius: 4px;
            background-color: $errorMessageBalloonBackground;
            color: #fff;

            &:before {
                content: "\f00d";
                display: inline-block;
                width: 14px;
                margin-left: -14px;
                color: #fff;
                font: normal 1.15em/1em FontAwesome, sans-serif;
            }
        }
    }
}

@mixin text-line-truncate($width: 100%) {
    width: $width;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin clearfix-box() {
    &:after {
        display: block;
        width: 100%;
        content: '';
        clear: both;
    }
}

// Set inner offset from the edges to include the safe-area
// iPhone X
// Use like native padding
// Ex. @include safe-area-offset(padding, 10px 15px);
// Ex. @include safe-area-offset(margin, 10px 15px 20px);
@mixin safe-area-offset($property, $values) {
    @if ($property != null and $values != null and length($values) <= 4) {
        $safe-area-offset-left: 0;
        $safe-area-offset-right: 0;

        #{$property}: #{$values};

        @if ($enable-safe-area) {
            @if (length($values) == 1) {
                $safe-area-offset-left: nth($values, 1);
                $safe-area-offset-right: nth($values, 1);
            } @else if (length($values) == 2 or length($values) == 3) {
                $safe-area-offset-left: nth($values, 2);
                $safe-area-offset-right: nth($values, 2);
            } @else if (length($values) == 4) {
                $safe-area-offset-left: nth($values, 4);
                $safe-area-offset-right: nth($values, 2);
            }

            @include safe-area-property-left(#{$property}-left, $safe-area-offset-left, false);
            @include safe-area-property-right(#{$property}-right, $safe-area-offset-right, false);
        }
    } @else if (length($values) > 4) {
        @warn 'Incorrect arguments of mixin';
    }
}

// Set any property with left safe-area zone
@mixin safe-area-property-left($property, $value: 0, $default: true) {
    @if ($property != null or $value != null) {
        @if ($default) {
            #{$property}: #{$value};
        }

        @if ($enable-safe-area) {
            @if (strip-units($value) == 0) {
                // iOS 11
                #{$property}: constant(safe-area-inset-left);

                // iOS 11.2+
                #{$property}: env(safe-area-inset-left);
            } @else {
                // iOS 11
                #{$property}: calc(constant(safe-area-inset-left) + #{$value});

                // iOS 11.2+
                #{$property}: calc(env(safe-area-inset-left) + #{$value});
            }
        }
    }
}

// Set any property with right safe-area zone
@mixin safe-area-property-right($property, $value: 0, $default: true) {
    @if ($property != null or $value != null) {
        @if ($default) {
            #{$property}: #{$value};
        }

        @if ($enable-safe-area) {
            @if (strip-units($value) == 0) {
                // iOS 11
                #{$property}: constant(safe-area-inset-right);

                // iOS 11.2+
                #{$property}: env(safe-area-inset-right);
            } @else {
                // iOS 11
                #{$property}: calc(constant(safe-area-inset-right) + #{$value});

                // iOS 11.2+
                #{$property}: calc(env(safe-area-inset-right) + #{$value});
            }
        }
    }
}

// Mixin for include font-awesome icons to custom elements
// List of icons https://github.com/FortAwesome/Font-Awesome/blob/v4.7.0/scss/_variables.scss
// @param $icon (Font Awesome icon)
// @param $state {CSS pseudo-element}
// Use:  @include fa-icon($view-product-gallery-icon, before, true) {
//  extra rules
// }
@mixin fa-icon($icon: null, $state: before, $extra-rules: false) {
    @if ($icon) {
        &:#{$state} {
            content: '#{$icon}';
            font-family: 'FontAwesome', $baseFontFamily;

            @if ($extra-rules) {
                @content;
            }
        }
    }
}

// Creates set of keyframes with vendor prefixes
@mixin keyframe($animation-name) {
    @-webkit-keyframes $animation-name {
        @content;
    }

    @keyframes $animation-name {
        @content;
    }
}
